//
//   Copyright 2018  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "signing"
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


repositories {
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}

project.ext.group = 'io.warp10'
project.ext.uberjar = null != System.getProperty('uberjar')
project.ext.name = 'warp10-plugin-warpstudio'
project.ext.version = getShortVersionName()
version getShortVersionName()
group = project.ext.group
archivesBaseName = project.ext.name


// ------------------------------------------------------------------
//                    AUTO RELEASE MANAGEMENT
// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
// ------------------------------------------------------------------
def getVersionName(String revision) {
    if (null != revision) {
        if (revision.endsWith('SNAPSHOT')) {
            return revision
        }
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim();
}

def getShortVersionName(String revision) {
    if (null != revision) {
        if (revision.endsWith('SNAPSHOT')) {
            return revision
        }
    }

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--abbrev=0'
        standardOutput = stdout
    }
    return stdout.toString().trim();
}

//
// Check local git repo is synced with the remote
//
def isGitRepoSynced() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'status', '-u', 'no', '--porcelain'
        standardOutput = stdout
    }
    //
    // Exclude gradle.properties
    //
    String val = stdout.toString().replaceAll(/.*\/gradle.properties\n/, '')
    return (0 == val.trim().size())
}

shadowJar {
    baseName project.ext.name
    manifest {
        attributes(
                'Implementation-Title': "warp10-warpstudio",
                'Implementation-Vendor': "Warp 10",
                'Implementation-Version': getShortVersionName(),
                'Main-Class': 'io.warp10.warpstudio.Main'
        )
        attributes('WarpFleet-Description': 'WarpStudioâ„¢ plugin')
        attributes('WarpFleet-Group': project.ext.group)
        attributes('WarpFleet-Artifact': project.ext.name)
        attributes('WarpFleet-Version': project.ext.version)
    }
    classifier = ''
    relocate 'org', 'io.warp10.warpstudio.org'
    relocate 'jetty', 'io.warp10.warpstudio.jetty'
    from('.') {
        include 'README.md'
        include 'wf.json'
        include 'warp10.conf'
    }
}

configurations {
    provided
}

dependencies {
    provided 'io.warp10:warpscript:+'
    compile 'io.warp10:warp10-warpstudio-server:2.0.2' // + project.ext.version
}

if (project.hasProperty("signing.gnupg.keyName")) {
    signing {
        useGpgCmd()
        sign publishing.publications
    }
}

sourceSets {
    main {
        compileClasspath = compileClasspath + configurations.provided
    }
}

idea {
    module {
        inheritOutputDirs = true
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            groupId project.ext.group
            artifactId project.ext.name
            version this.getShortVersionName()
	    from project.shadow.component(publication)
            pom {
                name = project.ext.name
                description = 'WarpStudio, the WarpScript editor'
                url = 'https://warp10.io/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'senx'
                        name = 'SenX'
                        email = 'contact@senx.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:senx/warp10-plugin-warpstudio.git'
                    developerConnection = 'scm:git:git://github.com:senx/warp10-plugin-warpstudio.git'
                    url = 'https://github.com/senx/warp10-plugin-warpstudio.git'
                }
            }
        }
    }

    repositories {
        if (project.hasProperty("ossrhUsername")) {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
        if (project.hasProperty("nexusUsername")) {
            maven {
                name "nexus"
                url "$nexusHost/repository/maven-releases/"
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
}

if (project.hasProperty("ossrhUsername")) {
    nexusStaging {
        packageGroup = "io.warp10"
        username ossrhUsername
        password ossrhPassword
    }
}

artifacts {
    archives shadowJar, javadocJar, sourcesJar
}


uploadArchives {
    if (project.hasProperty("ossrhUsername")) {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.ext.name
                    packaging 'jar'
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    description 'WarpStudio, the WarpScript editor'
                    url 'https://warp10.io'

                    scm {
                        url 'https://github.com/senx/warp10-plugin-warpstudio.git'
                    }

                    developers {
                        developer {
                            id 'senx'
                            name 'SenX'
                            email 'contact@senx.io'
                        }
                    }
                }
            }
        }
    }
}


