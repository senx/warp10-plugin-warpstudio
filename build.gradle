//
//   Copyright 2018-2024  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//


buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath 'io.warp10:warpfleet-gradle-plugin:0.0.3'
  }
}
plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'io.github.gradle-nexus.publish-plugin' version '2.0.0-rc-1'
}

apply plugin: 'io.warp10.warpfleet-gradle-plugin'
project.group = 'io.warp10'
project.description = 'WarpStudio, the WarpScript editor'

project.version = getVersionFromGit()

// Reproducible Builds
//
tasks.withType(AbstractArchiveTask).configureEach {
  preserveFileTimestamps = false
  reproducibleFileOrder = true
}

repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'junit:junit:4.13.2'
  compileOnly 'io.warp10:warpscript:3.1.2'
  implementation 'io.warp10:warp10-warpstudio-server:2.1.5'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(8)
  }
  withSourcesJar()
  withJavadocJar()
}

sourceSets {
  main {
    resources {
      srcDirs 'src/main/warpscript'
    }
  }
}

jar {
  manifest {
    attributes('WarpFleet-Description': project.description)
    attributes('WarpFleet-Group': project.group)
    attributes('WarpFleet-Artifact': project.name)
    attributes('WarpFleet-Version': project.version)
  }
  from('.') {
    include 'README.md'
    include "${project.group}-${project.name}.conf"
    include 'wf.json'
  }
}

shadowJar {
  // In build/libs the shadowJar is suffixed with the uberjar classifier.
  archiveClassifier.set('uberjar')
  from('.') {
    include 'README.md'
    include "${project.group}-${project.name}.conf"
    include 'wf.json'
  }
  dependencies {
    exclude(dependency('org.slf4j::'))
  }

  relocate 'org', 'io.warp10.warpstudio.org'
  relocate 'jetty', 'io.warp10.warpstudio.jetty'
}

//
// Remove the ShadowJar from the java component. This avoids publishing the shadowJar
// when using "from components.java".
//
components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
  skip()
}

publishing {
  publications {
    jar(MavenPublication) {
      from components.java
    }
    uberjar(MavenPublication) {
      // Publishing the shadowJar is done using the version and not the classifier as
      // Spark cannot use classifier dependencies.
      version += '-uberjar'
      artifact source: shadowJar, classifier: ''
      artifact sourcesJar
      artifact javadocJar
    }

    // Configure all POMs
    withType(MavenPublication) {
      pom {
        name = project.name
        description = project.description
        url = 'https://github.com/senx/' + project.name
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            name = 'senx'
            organization = 'SenX'
            organizationUrl = 'https://senx.io'
            email = 'contact@senx.io'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/senx/' + project.name + '.git'
          developerConnection = 'scm:git:ssh://github.com/senx/' + project.name + '.git'
          url = 'https://github.com/senx/' + project.name
        }
      }
    }
  }
  repositories {
    if (project.hasProperty('nexusHost')) {
      maven {
        name = "Nexus"
        def releasesRepoUrl = nexusHost + '/repository/maven-releases/'
        def snapshotsRepoUrl = nexusHost + '/repository/maven-snapshots/'
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = nexusUsername
          password = nexusPassword
        }
      }
    }
  }
}

nexusPublishing {
  repositories {
    if (project.hasProperty('ossrhUsername')) {
    sonatype {
      username = ossrhUsername
      password = ossrhPassword
    }
  }
  }
}
warpfleet {
  wfJson = "./wf.json"

}

signing {
  useGpgCmd()
  sign publishing.publications
}

// Avoid dependency warning
tasks.withType(PublishToMavenRepository) {
  dependsOn(tasks.findByName('signJarPublication'))
  dependsOn(tasks.findByName('signUberjarPublication'))
}
tasks.withType(PublishToMavenLocal) {
  dependsOn(tasks.findByName('signJarPublication'))
  dependsOn(tasks.findByName('signUberjarPublication'))
}


def getVersionFromGit() {
  def nogit = System.getProperty("nogit")
  if (null != nogit) {
    // Override version with the property value. To remove the version altogether use '-Dnogit' without value.
    return nogit
  } else {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--always'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}
